# создадим класс и его атрибуты
class Point:
    A = 0
    #создание методов класса
    def coords(self,x,y):
        self.X = x 
        '''данный метод создает новые атрибуты ЭКЗЕМПЛЯРА класса(а не самого класса), где 
        self = ссылка на объект класса
        X = название атрибута класса
        x = значение локальной переменной метода класса(которую мы передали)'''
        self.Y = y
        #однако функции с self не могут обращаться к атрибутам КЛАССА

    def get(self):
        return(self.X)


''' Параметр self это ссылка на конкретный экземпляр класса. 
    При этом, само имя self не является особенным, а лишь договоренностью. 
    Вместо self можно использовать другое имя, НО ТАК ДЕЛАТЬ НЕ СТОИТ. 
    Хотя технически использовать другое имя можно, всегда используйте self  
      
class Point:
    A = 0
    def coords(go,x,y):
        go.X = x
        go.Y = y
    def get(go):
        return(go.X)
pt = Point()
pt.coords(10,20)
print(pt.get())
>>> 10   '''

#объявляем объект класса
pt = Point()

#вызвали метод класса
'''аргумент self писать не надо, т.к. это ссылка на pt
Вот примерная абстракция:
   self.coords(_,_) => pt.coords(10,20)  '''
pt.coords(10,20)

#вызовем еще одну функцию
print(pt.get())

#К методам класса можно обращаться также, как к атрибутам
f = getattr(pt, 'get') 
'''Однако такое обращение к методам делается крайне редко'''
print(f()+10)